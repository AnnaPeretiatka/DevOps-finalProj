apiVersion: apps/v1
kind: Deployment
metadata: {
  name: statuspage-web,
  namespace: statuspage
}
spec:
  replicas: {{ .Values.replicaCounts.web }}
  strategy: { type: RollingUpdate, rollingUpdate: { maxUnavailable: 0, maxSurge: 1 } }
  selector: {
    matchLabels: {
      app: statuspage, 
      tier: web
    }
  }
  template:
    metadata: {
      labels: {
        app: statuspage,
        tier: web
      }
    }
    spec:
      containers:
        - name: web
          image: "{{ required "image.repository is required" .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["gunicorn","--workers","3","--bind","0.0.0.0:8000","statuspage.wsgi"]
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
          envFrom:
            - secretRef: { name: statuspage-secrets }
            - configMapRef: { name: statuspage-config }
          readinessProbe:
            httpGet:
              path: / 
              port: 8000
              httpHeaders:
                - name: Host
                  value: {{ default "localhost" .Values.env.STATUS_HOSTNAME | quote }}
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /
              port: 8000
              httpHeaders:
                - name: Host
                  value: {{ default "localhost" .Values.env.STATUS_HOSTNAME | quote }}
            initialDelaySeconds: 10
            periodSeconds: 20
          resources: {{- toYaml .Values.resources.web | nindent 12 }}
