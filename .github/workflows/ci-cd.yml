name: CI/CD

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      - name: Build and push Docker image
        run: |
          IMAGE_URI=${{ secrets.ECR_REPO }}:${{ github.sha }}
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "GIT_SHA=${{ github.sha }}" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name ${{ secrets.EKS_CLUSTER }}

      - name: Deploy with Helm
        shell: bash
        run: |
          set -euo pipefail

          ACM_FLAGS=""
          if [[ -n "${{ secrets.ACM_ARN }}" ]]; then
            ACM_FLAGS="--set acmArn='${{ secrets.ACM_ARN }}' --set env.SITE_PROTOCOL=https"
          else
            ACM_FLAGS="--set env.SITE_PROTOCOL=http"
          fi

          helm upgrade --install statuspage infra/helm/statuspage \
            --namespace "${{ secrets.K8S_NAMESPACE }}" \
            --create-namespace \
            --set image.repository="${{ secrets.ECR_REPO }}" \
            --set image.tag="${{ env.GIT_SHA }}" \
            --set image.pullPolicy=Always \
            --set env.SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            --set-string env.DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --set env.REDIS_URL="${{ secrets.REDIS_URL }}" \
            --set env.STATUS_HOSTNAME="${{ secrets.STATUS_HOSTNAME }}" \
            --set env.ALLOWED_HOSTS="${{ secrets.STATUS_HOSTNAME }}" \
            --set collectstatic.enabled=false \
            --set s3.bucket="${{ secrets.S3_BUCKET }}" \
            --set s3.region="${{ secrets.AWS_REGION }}" \
            --set ingress.enabled=true \
            --set ingress.className=alb \
            --set ingress.hosts[0].host="${{ secrets.STATUS_HOSTNAME }}" \
            --set ingress.hosts[0].paths[0].path=/ \
            --set ingress.hosts[0].paths[0].pathType=Prefix \
            $ACM_FLAGS || {
              code=$?
              echo "::error::Helm upgrade failed with exit code $code"
              echo "----- kube events (last 100) -----"
              kubectl -n "${{ secrets.K8S_NAMESPACE }}" get events --sort-by=.lastTimestamp | tail -n 100 || true
              echo "----- web pods -----"
              kubectl -n "${{ secrets.K8S_NAMESPACE }}" get pods -l app=statuspage,tier=web -o wide || true
              echo "----- web pod logs (last 200 lines) -----"
              for p in $(kubectl -n "${{ secrets.K8S_NAMESPACE }}" get pods -l app=statuspage,tier=web -o name || true); do
                echo "### $p"
                kubectl -n "${{ secrets.K8S_NAMESPACE }}" logs "$p" --tail=200 || true
              done
              exit $code
            }

          echo "Helm succeeded."