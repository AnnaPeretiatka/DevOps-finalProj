name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  K8S_NAMESPACE: statuspage
  DB_USER: statuspage
  DB_HOST: status-page-ay-pg.cx248m4we6k7.us-east-1.rds.amazonaws.com
  DB_NAME: statuspage
  STATUS_HOSTNAME: status-page-ay.com
  ACM_ARN: arn:aws:acm:us-east-1:992382545251:certificate/64de4465-fc68-4518-936f-e298a6c07b51

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: ecr-login
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t ${{ secrets.ECR_REPO }}:$IMAGE_TAG .
          docker push ${{ secrets.ECR_REPO }}:$IMAGE_TAG
          echo "GIT_SHA=$IMAGE_TAG" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ${{ secrets.EKS_CLUSTER }} \
            --region $AWS_REGION

      - name: Fetch DB password from Secrets Manager
        run: |
          set -euo pipefail
          DBID="status-page-ay-pg"

          SECRET_ARN=$(aws rds describe-db-instances \
            --region "$AWS_REGION" \
            --db-instance-identifier "$DBID" \
            --query 'DBInstances[0].MasterUserSecret.SecretArn' \
            --output text)

          DB_SECRET=$(aws secretsmanager get-secret-value \
            --region "$AWS_REGION" \
            --secret-id "$SECRET_ARN" \
            --query SecretString \
            --output text)

          DB_PASS=$(echo "$DB_SECRET" | jq -r .password)

          echo "DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:5432/${DB_NAME}?sslmode=require" >> $GITHUB_ENV

      - name: Deploy with Helm
        run: |
          set -euo pipefail

          ACM_FLAGS="--set ingress.annotations.\"alb\.ingress\.kubernetes\.io/listen-ports\"='[{\"HTTP\":80},{\"HTTPS\":443}]' \
            --set ingress.annotations.\"alb\.ingress\.kubernetes\.io/certificate-arn\"=${ACM_ARN} \
            --set ingress.annotations.\"alb\.ingress\.kubernetes\.io/ssl-redirect\"=443"

          helm upgrade --install statuspage infra/helm/statuspage \
            --namespace "${K8S_NAMESPACE}" \
            --create-namespace \
            --set image.repository="${{ secrets.ECR_REPO }}" \
            --set image.tag="${GIT_SHA}" \
            --set image.pullPolicy=Always \
            --set env.SECRET_KEY='${{ secrets.SECRET_KEY }}' \
            --set-string env.DATABASE_URL="${DATABASE_URL}" \
            --set env.REDIS_URL='${{ secrets.REDIS_URL }}' \
            --set env.STATUS_HOSTNAME="${STATUS_HOSTNAME}" \
            --set env.ALLOWED_HOSTS="${STATUS_HOSTNAME}" \
            --set env.SITE_PROTOCOL='https' \
            --set collectstatic.enabled=false \
            --set s3.bucket="status-page-ay-statics3-992382545251" \
            --set s3.region="${AWS_REGION}" \
            --set ingress.enabled=true \
            --set ingress.className=alb \
            --set ingress.hosts[0].host="${STATUS_HOSTNAME}" \
            --set ingress.hosts[0].paths[0].path=/ \
            --set ingress.hosts[0].paths[0].pathType=Prefix \
            ${ACM_FLAGS} || {
              code=$?
              echo "::error::Helm upgrade failed with exit code $code"
              echo "----- kube events (last 100) -----"
              kubectl -n "${K8S_NAMESPACE}" get events --sort-by=.lastTimestamp | tail -n 100 || true
              echo "----- web pods -----"
              kubectl -n "${K8S_NAMESPACE}" get pods -l app=statuspage,tier=web -o wide || true
              echo "----- web pod logs (last 200 lines) -----"
              for p in $(kubectl -n "${K8S_NAMESPACE}" get pods -l app=statuspage,tier=web -o name || true); do
                echo "### $p"
                kubectl -n "${K8S_NAMESPACE}" logs "$p" --tail=200 || true
              done
              exit $code
            }
          echo "Helm succeeded."